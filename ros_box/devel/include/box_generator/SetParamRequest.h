// Generated by gencpp from file box_generator/SetParamRequest.msg
// DO NOT EDIT!


#ifndef BOX_GENERATOR_MESSAGE_SETPARAMREQUEST_H
#define BOX_GENERATOR_MESSAGE_SETPARAMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace box_generator
{
template <class ContainerAllocator>
struct SetParamRequest_
{
  typedef SetParamRequest_<ContainerAllocator> Type;

  SetParamRequest_()
    : max_speed_xy(0.0)
    , max_vel_x(0.0)
    , acc_lim_x(0.0)
    , decel_lim_x(0.0)
    , max_vel_theta(0.0)  {
    }
  SetParamRequest_(const ContainerAllocator& _alloc)
    : max_speed_xy(0.0)
    , max_vel_x(0.0)
    , acc_lim_x(0.0)
    , decel_lim_x(0.0)
    , max_vel_theta(0.0)  {
  (void)_alloc;
    }



   typedef float _max_speed_xy_type;
  _max_speed_xy_type max_speed_xy;

   typedef float _max_vel_x_type;
  _max_vel_x_type max_vel_x;

   typedef float _acc_lim_x_type;
  _acc_lim_x_type acc_lim_x;

   typedef float _decel_lim_x_type;
  _decel_lim_x_type decel_lim_x;

   typedef float _max_vel_theta_type;
  _max_vel_theta_type max_vel_theta;





  typedef boost::shared_ptr< ::box_generator::SetParamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::box_generator::SetParamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetParamRequest_

typedef ::box_generator::SetParamRequest_<std::allocator<void> > SetParamRequest;

typedef boost::shared_ptr< ::box_generator::SetParamRequest > SetParamRequestPtr;
typedef boost::shared_ptr< ::box_generator::SetParamRequest const> SetParamRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::box_generator::SetParamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::box_generator::SetParamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::box_generator::SetParamRequest_<ContainerAllocator1> & lhs, const ::box_generator::SetParamRequest_<ContainerAllocator2> & rhs)
{
  return lhs.max_speed_xy == rhs.max_speed_xy &&
    lhs.max_vel_x == rhs.max_vel_x &&
    lhs.acc_lim_x == rhs.acc_lim_x &&
    lhs.decel_lim_x == rhs.decel_lim_x &&
    lhs.max_vel_theta == rhs.max_vel_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::box_generator::SetParamRequest_<ContainerAllocator1> & lhs, const ::box_generator::SetParamRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace box_generator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::box_generator::SetParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::box_generator::SetParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::box_generator::SetParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::box_generator::SetParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::box_generator::SetParamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::box_generator::SetParamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::box_generator::SetParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9469833eb98d5e9c2982ce6ee19b2e3";
  }

  static const char* value(const ::box_generator::SetParamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9469833eb98d5e9ULL;
  static const uint64_t static_value2 = 0xc2982ce6ee19b2e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::box_generator::SetParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "box_generator/SetParamRequest";
  }

  static const char* value(const ::box_generator::SetParamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::box_generator::SetParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 max_speed_xy\n"
"float32 max_vel_x\n"
"float32 acc_lim_x\n"
"float32 decel_lim_x\n"
"float32 max_vel_theta\n"
;
  }

  static const char* value(const ::box_generator::SetParamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::box_generator::SetParamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.max_speed_xy);
      stream.next(m.max_vel_x);
      stream.next(m.acc_lim_x);
      stream.next(m.decel_lim_x);
      stream.next(m.max_vel_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetParamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::box_generator::SetParamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::box_generator::SetParamRequest_<ContainerAllocator>& v)
  {
    s << indent << "max_speed_xy: ";
    Printer<float>::stream(s, indent + "  ", v.max_speed_xy);
    s << indent << "max_vel_x: ";
    Printer<float>::stream(s, indent + "  ", v.max_vel_x);
    s << indent << "acc_lim_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_lim_x);
    s << indent << "decel_lim_x: ";
    Printer<float>::stream(s, indent + "  ", v.decel_lim_x);
    s << indent << "max_vel_theta: ";
    Printer<float>::stream(s, indent + "  ", v.max_vel_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOX_GENERATOR_MESSAGE_SETPARAMREQUEST_H
